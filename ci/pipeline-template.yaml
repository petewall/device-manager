#@ load("@ytt:data", "data")
---
resource_types:
- name: pull-request
  type: registry-image
  source:
    repository: teliaoss/github-pr-resource
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    
resources:
#@ for/end service in data.values.services:
- name: #@ service.name
  type: registry-image
  icon: docker
  source:
    repository: #@ service.image.repo
    tag: latest
    username: ((dockerhub.username))
    password: ((dockerhub.password))

#@ for service in data.values.services:
- name: #@ service.name + "-source"
  type: git
  icon: github
  source:
    uri: #@ "git@github.com:" + service.repo.owner + "/" + service.repo.name
    branch: #@ service.branch
    private_key: ((github.private_key))

- name: #@ service.name + "-pull-requests"
  type: pull-request
  icon: github
  check_every: 1h
  source:
    repository: #@ service.repo.owner + "/" + service.repo.name
    access_token: ((github.access_token))
#@ end

- name: golang
  icon: language-go
  type: registry-image
  source:
    repository: golang
    tag: 1.18-alpine
    username: ((dockerhub.username))
    password: ((dockerhub.password))

jobs:
#@ for service in data.values.services:
- name: #@ "test-" + service.name
  plan:
    - in_parallel:
      - get: golang
      - get: source
        resource: #@ service.name + "-source"
        trigger: true
    - task: lint
      file: source/ci/tasks/test-lint.yaml
    - task: unit-tests
      image: golang
      file: source/ci/tasks/test-units.yaml

- name: #@ "build-" + service.name
  plan:
    - get: source
      resource: #@ service.name + "-source"
      trigger: true
      passed:
        - #@ "test-" + service.name
    - task: build-image
      privileged: true
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: concourse/oci-build-task
            username: ((dockerhub.username))
            password: ((dockerhub.password))
        inputs:
          - name: source
            path: .
        outputs:
          - name: image
        params:
          BUILD_ARG_GOOS: linux
          BUILD_ARG_GOARCH: amd64
          IMAGE_PLATFORM: linux/amd64
        run:
          path: build
    - put: #@ service.name
      inputs: [ image ]
      params:
        image: image/image.tar

- name: #@ "test-" + service.name + "-pr"
  serial: true
  plan:
  - in_parallel:
    - get: source
      resource: #@ service.name + "-pull-requests"
      trigger: true
      version: every
      params:
        integration_tool: rebase
      on_success:
        put: #@ service.name + "-pull-requests"
        inputs: detect
        params:
          path: source
          status: pending
      on_failure:
        put: #@ service.name + "-pull-requests"
        inputs: detect
        params:
          path: source
          context: merge-conflict
          status: failure
    - get: golang
  - task: test
    image: golang
    config:
      platform: linux
      inputs:
        - name: source
      run:
        dir: source
        path: make
        args: [test]
    on_failure:
      put: #@ service.name + "-pull-requests"
      inputs: detect
      params:
        path: source
        status: failure
  - put: #@ service.name + "-pull-requests"
    inputs: detect
    params:
      path: source
      status: success
#@ end
